import json
import boto3
import uuid
from datetime import datetime
from boto3.dynamodb.conditions import Key
 
dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('HospitalQueue')
 
def lambda_handler(event, context):
    path = event['path']
    http_method = event['httpMethod']
    if path == '/submit' and http_method == 'POST':
        return submit_patient(json.loads(event['body']))
    elif path == '/check_queues' and http_method == 'GET':
        return check_queues()
    else:
        return {
            'statusCode': 404,
            'body': json.dumps('Not Found')
        }
 
def submit_patient(data):
    user_id = str(uuid.uuid4())
    timestamp = datetime.now().isoformat()
    item = {
        'UserId': user_id,
        'Name': data['name'],
        'LastName': data['lastName'],
        'DoB': data['dob'],
        'Hospital': data['hospital'],
        'Symptoms': data['symptoms'],
        'Timestamp': timestamp,
        'QueuePosition': calculate_queue_position(data['symptoms'])
    }
    table.put_item(Item=item)
    return {
        'statusCode': 200,
        'body': json.dumps({
            'userId': user_id,
            'queuePosition': item['QueuePosition']
        })
    }
 
def check_queues():
    hospitals = ['Hospital A', 'Hospital B', 'Hospital C']
    queue_lengths = {}
    for hospital in hospitals:
        response = table.query(
            IndexName='HospitalIndex',
            KeyConditionExpression=Key('Hospital').eq(hospital)
        )
        queue_lengths[hospital] = len(response['Items'])
    return {
        'statusCode': 200,
        'body': json.dumps(queue_lengths)
    }
 
def calculate_queue_position(symptoms):
    if 'emergency' in symptoms.lower():
        return 1
    return 10  # Default position
